---
description: 
globs: 
alwaysApply: true
---
## Context
Ce projet est une construction d'un boilerplate en Next.js qui suit les principes de l'architecture hexagonale (Clean Architecture / Ports & Adapters). L'objectif est de séparer clairement la logique métier des détails techniques et des dépendances externes.

## Structure des dossiers
- src/core/services : Contient la logique métier de l'application (use cases, business rules)
- src/core/ports/in : Interfaces de contrat pour les cas d'usage entrants (application)
- src/core/ports/out : Interfaces de contrat pour les dépendances sortantes (base de données, services externes)
- src/core/models : Contient les entités métiers
- src/repositories : Implémentations concrètes des interfaces définies dans ports/out. 
- src/lib/di-container : Utiliser l'injection de dépendances pour inverser le contrôle
- src/hooks: Les custom hooks de React

## Règle de codage
- Les repositories doivent retourner une interface correspondant aux interfaces dans src/core/ports/out
- Le dossier adapters/out qui est l'implémentation concrète correspond au dossier src/repositories/ 
- Le dossier adapters/in n'existe pas
- Respecter le principe de responsabilité unique
- Ne faire de "if/else", toujours privilégier les "return early"
- Privilégier l'immutabilité dans le src/core
- Gérer les erreurs de manière explicite
- Utiliser des types stricts (TypeScript)
- Utilise toujours des class dans le src/core/services et src/repositories
- Utilise la composition plutôt que l'héritage
<!-- - Le dossier app/ et hook/ ne doit jamais appeler directement le dossier repositories, mais toujours appeler le  -->

## Nommage des class 
Services : [Entity]Service (ex: UserService, OrderService)
Ports in : [Entity]PortIn (ex: UserPortIn)
Ports out : [Entity]Repository (ex: UserRepository)
Repositories : [Technology][Entity]RepositoryImpl (ex: FirestoreUserRepositoryImpl)

## Nommage des fichiers
Services : [Entity].service.ts (ex: user.service.ts)
Ports in : [Entity].port.ts (ex: user.port.ts)
Ports out : [Entity].repository.ts (ex: user.repository.ts)
Models : [Entity].ts (ex: user.ts)
Repositories : [Technology].[Entity].repository.ts
