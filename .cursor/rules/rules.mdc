---
description:
globs:
alwaysApply: true
---

## Context

Ce projet est une construction d'un boilerplate en Next.js qui suit les principes de l'architecture hexagonale (Clean Architecture / Ports & Adapters). L'objectif est de séparer clairement la logique métier des détails techniques et des dépendances externes.

## Lexique

- l'utilisateur: Désigne la personne final qui intéragit avec l'application
- application: Désigne le dossier src/app, il s'agit du front-end que l'utilisateur voient
- les composants: Désigne le dossier (src/components), il s'agit des briques d'interface graphiques

## Structure des dossiers

- src/core/services : Contient la logique métier de l'application (use cases, business rules)
- src/core/ports/in : Interfaces de contrat pour les cas d'usage entrants (application)
- src/core/ports/out : Interfaces de contrat pour les dépendances sortantes (base de données, services externes)
- src/core/models : Contient les entités métiers
- src/repositories : Implémentations concrètes des interfaces définies dans ports/out.
- src/lib/di-container : Utiliser l'injection de dépendances pour inverser le contrôle
- src/hooks: Les custom hooks de React

## Règle spécifique à l'architecture hexagonale

- Le dossier adapters/in n'existe pas

## Règle de codage

- Respecter le principe de responsabilité unique
- Les fonctions doivent être le plus petit
- Ne jamais faire de "if {} else {}" ou de "if {} else if {} else", toujours privilégier les "return early"
- Aucune imbrication de code est autorisés
- N'utilise jamais de ternaires
- Pas d'opérateurs conditionnels comme &&
- Toujours utiliser l'immutabilité
- Gérer les erreurs de manière explicite
- Utiliser des types stricts (TypeScript)
- Utilise la composition plutôt que l'héritage
- Aucune fonction ne doit être définie dans une fonction
